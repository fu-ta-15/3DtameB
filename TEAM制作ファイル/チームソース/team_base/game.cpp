//=============================================================================
//
// ゲームの処理 [game.cpp]
// Author:Taiki Hayasaka, Sota Tomoe
//
//=============================================================================
#include "game.h"
#include "camera.h"
#include "light.h"
#include "meshfield.h"
#include "meshwall.h"
#include "player.h"
#include "input.h"
#include "fade.h"
#include "enemy.h"

//=============================================================================
// グローバル変数
//=============================================================================
Stage g_stage;

//=============================================================================
// ゲーム画面の初期化処理
//=============================================================================
HRESULT InitGame(void)
{
	//モデルの初期化処理
	InitPlayer();

	//カメラの初期化処理
	InitCamera();

	//ライトの初期化処理
	InitLight();

	//---ステージに依るもの---

	//敵の初期化処理
	InitEnemy();

	//メッシュフィールドの初期化処理
	InitMeshfield(g_stage.nStageNum);

	//壁(メッシュ)の初期化処理
	InitMeshwall();

	//壁の配置
	SetWall();

	return S_OK;
}

//=============================================================================
// ゲーム画面の終了処理
//=============================================================================
void UninitGame(void)
{
	//メッシュフィールドの終了処理
	UninitMeshfield();

	//敵の終了処理
	UninitEnemy();

	//壁(メッシュ)の終了処理
	UninitMeshwall();

	//モデルの終了処理
	UninitPlayer();

	//カメラの終了処理
	UninitCamera();

	//ライトの終了処理
	UninitLight();
}

//=============================================================================
// ゲーム画面の更新処理
//=============================================================================
void UpdateGame(void)
{
	//メッシュフィールドの更新処理
	UpdateMeshfield();

	//壁(メッシュ)の更新処理
	UpdateMeshwall();

	//モデルの更新処理
	UpdatePlayer();

	//敵の更新処理
	UpdateEnemy();

	//カメラの更新処理
	UpdateCamera();

	//ライトの更新処理
	UpdateLight();

	if (GetKeyboardTrigger(DIK_RETURN) == true)
	{
		g_stage.nStageNum += 1;
		SetFade(FADE_OUT, MODE_GAME);
	}
}

//=============================================================================
// ゲーム画面の描画処理
//=============================================================================
void DrawGame(void)
{
	//メッシュフィールドの描画処理
	DrawMeshfield();

	//壁(メッシュ)の描画処理
	DrawMeshwall();

	//モデルの描画処理
	DrawPlayer();

	//敵の描画処理
	DrawEnemy();
}

//=============================================================================
// ステージ番号を取得
//=============================================================================
Stage *GetStage(void)
{
	return &g_stage;
}

//=============================================================================
// 壁の配置
//=============================================================================
void SetWall(void)
{
	SetMeshwall(D3DXVECTOR3(0.0f, 0.0f, 400.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 400.0f, 50.0f);
	SetMeshwall(D3DXVECTOR3(0.0f, 0.0f, 100.0f), D3DXVECTOR3(0.0f, D3DX_PI / 2, 0.0f), 400.0f, 50.0f);
	SetMeshwall(D3DXVECTOR3(0.0f, 0.0f, 100.0f), D3DXVECTOR3(0.0f, D3DX_PI / -2, 0.0f), 400.0f, 50.0f);
	SetMeshwall(D3DXVECTOR3(0.0f, 0.0f, 100.0f), D3DXVECTOR3(0.0f, D3DX_PI, 0.0f), 400.0f, 50.0f);
}